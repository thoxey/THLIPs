#ifndef __CELL__
#define __CELL__

#include "utils.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file gridCell.h
/// @brief The cells in the MAC Grid
/// @author Tom Hoxey
/// @version 1.0
/// @date 19/01/17 Initial version
//----------------------------------------------------------------------------------------------------------------------

class Cell
{
public:
    //Constructors
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor
    /// @param ivec3 _pos : The position of the cell in the grid
    //----------------------------------------------------------------------------------------------------------------------
    Cell(ivec3 _pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Changes the velocity field of the cell
    /// @param vec3 _newVel : The new velocity field for the cell
    //----------------------------------------------------------------------------------------------------------------------
    void updateVel(vec3 _newVel);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Updates the velocity field of the cell
    /// @param vec3 _addition : The velocity to add to the cell
    //----------------------------------------------------------------------------------------------------------------------
    void increaseVel(vec3 _addition);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the x component of the velocity field
    //----------------------------------------------------------------------------------------------------------------------
    real U();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the x component of the veloxity field to _newU
    /// @param real _newU : The value to change the x component to
    //----------------------------------------------------------------------------------------------------------------------
    void setU(real _newU);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the y component of the velocity field
    //----------------------------------------------------------------------------------------------------------------------
    real V();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the y component of the veloxity field to _newV
    /// @param real _newV : The value to change the y component to
    //----------------------------------------------------------------------------------------------------------------------
    void setV(real _newV);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the z component of the velocity field
    //----------------------------------------------------------------------------------------------------------------------
    real W();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the z component of the veloxity field to _newW
    /// @param real _newW : The value to change the z component to
    //----------------------------------------------------------------------------------------------------------------------
    void setW(real _newW);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the index of the cell
    /// @param uint _length : The amount of cells along one axis of the grid 9only cubes are supported currently)
    //----------------------------------------------------------------------------------------------------------------------
    uint getIDX(uint _length);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the change in the velocity field from the last step
    //----------------------------------------------------------------------------------------------------------------------
    vec3 getDeltaVel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the current value of the velocity field
    //----------------------------------------------------------------------------------------------------------------------
    vec3 getVelField() const;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The type of the cell, fluid, air or solid
    //----------------------------------------------------------------------------------------------------------------------
    cellType type;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The position of the cell in the grid
    //----------------------------------------------------------------------------------------------------------------------
    ivec3 gridPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The indexes of the particles contained within the cell
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<uint> m_paticleIDXs;

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The ressure inside the cell
    //----------------------------------------------------------------------------------------------------------------------
    real p;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The velocity field and the velocity field from the last step
    //----------------------------------------------------------------------------------------------------------------------
    //Vel field should be half a cell offset from the pressure
    vec3 velField, oldVelField;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The negative divergence value of the cell
    //----------------------------------------------------------------------------------------------------------------------
    real negativeDivergence;
};

#endif
