#ifndef __MACGRID__
#define __MACGRID__

#include "utils.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file MACGrid.h
/// @brief The Marker and Cell Grid class, based on the Robert Bridson model
/// @author Tom Hoxey
/// @version 1.0
/// @date 19/01/17 Initial version
//----------------------------------------------------------------------------------------------------------------------

class MACGrid
{
public:

    //Constructors
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor
    //----------------------------------------------------------------------------------------------------------------------
    MACGrid(uvec3 _size, real _cellWidth);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A container to store all the cells
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<uint> m_cells;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A container to store all the particles
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<MG_Particle> m_particles;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The hastable to store the cells
    //----------------------------------------------------------------------------------------------------------------------
    std::unordered_map<int, MG_Cell> m_hashTable;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the neighbors of a particular cell
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<MG_Cell> getNeighbors(MG_Cell _c);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the speed of the fastest particle
    //----------------------------------------------------------------------------------------------------------------------
    real getMaxSpeed();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Backward traces a point, based on Stam's method
    //----------------------------------------------------------------------------------------------------------------------
    vec3 tracePoint(vec3 _p, real _t);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns a cell based on hashKey
    //----------------------------------------------------------------------------------------------------------------------
    MG_Cell getCell(uint _key);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns a cell based on grid pos
    //----------------------------------------------------------------------------------------------------------------------
    MG_Cell getCell(uint _i, uint _j, uint _k);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns a cell based on grid pos
    //----------------------------------------------------------------------------------------------------------------------
    MG_Cell getCell(uvec3 _pos);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Generates a hash key, based on the original H&W MAC paper
    //----------------------------------------------------------------------------------------------------------------------
    uint generateKey(uint _i, uint _j, uint _k);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Generates a hash key, based on the original H&W MAC paper
    //----------------------------------------------------------------------------------------------------------------------
    uint generateKey(uvec3 _pos);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Checks if cell at position exists
    //----------------------------------------------------------------------------------------------------------------------
    bool checkForCell(uint _i, uint _j, uint _k, MG_Cell &_c);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Checks if cell at position exists
    //----------------------------------------------------------------------------------------------------------------------
    bool checkForCell(uvec3 _pos, MG_Cell& _c);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Adds a cell into the hash table
    //----------------------------------------------------------------------------------------------------------------------
    void insertCellInHashTable(MG_Cell _c);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the bounds of where the fluid is, where the solids are and where the air is
    //----------------------------------------------------------------------------------------------------------------------
    void initialiseCells(uvec3 _b, uvec3 _c);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    vec3 getCellPos(MG_Cell _c);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Width of a cell in real units, using notaion from H&W paper
    //----------------------------------------------------------------------------------------------------------------------
    real h;

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Size of the grid in cells
    //----------------------------------------------------------------------------------------------------------------------
    uint m_i_length, m_j_length, m_k_length;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    void initialiseCell(MG_Cell _c, uvec3 _pos, cellType _t);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    void initialiseCellWithFluid(MG_Cell &_c, uvec3 _pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    vec3 getJitteredPos(MG_Cell _c, uint _count);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Gets the velocity of a particle, used in trace point
    //----------------------------------------------------------------------------------------------------------------------
    vec3 getVelocity(vec3 _v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Used to get a 1D velocity using RK2
    //----------------------------------------------------------------------------------------------------------------------
    real getInterpolatedValue(vec3 _v, uint idx);
};

#endif
