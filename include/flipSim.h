#ifndef __FLIPSIM__
#define __FLIPSIM__

#include "MACGrid.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file flipSim.h
/// @brief The simulation header, contains the main simulation code
/// @author Tom Hoxey
/// @version 1.0
/// @date 19/01/17 Initial version
//----------------------------------------------------------------------------------------------------------------------

class FlipSim
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor
    /// @param uint _size : The amount of cells per axis
    /// @param real _cellWidth : The width of the cells in meters
    /// @param uvec3 _b : The bottom corner of the fluid cells (0,0,0)
    /// @param uvec3 _c : The top corner of the fluid cells (1,1,1)
    //----------------------------------------------------------------------------------------------------------------------
    FlipSim(uint _size, real _cellWidth, uvec3 _b, uvec3 _c);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Steps the simulation forward once
    /// @param real _dt : The real time passed since the last step
    //----------------------------------------------------------------------------------------------------------------------
    void step(real _dt);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Returns the particles active in the simulation
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Particle> getParticles() const;

private:
    //The steps of the fluid simulation
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Updates the grid cells depending on the particles
    //----------------------------------------------------------------------------------------------------------------------
    void updateGrid();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Calculate the negative divergence
    //----------------------------------------------------------------------------------------------------------------------
    void calculateNegativeDivergence();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Enforces the dirichlet condition i.e fluid cant move through a solid
    //----------------------------------------------------------------------------------------------------------------------
    void enforceDirichlet();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Calculate a neighbors entry in the laplacian matrix
    /// @param
    /// @param
    /// @param
    /// @param
    //----------------------------------------------------------------------------------------------------------------------
    void calculateNeighborLaplacian(uint _idx, uint _neighborIdx, real _scale, std::vector<int> _fluidIDXs, Eigen::SparseMatrix<real> &_A, uint &_nonSolidNeighbors);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Calculate the pressure in the cells
    /// @param real _dt : The real time passed since the last step
    //----------------------------------------------------------------------------------------------------------------------
    void calculatePressure(real _dt);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Applies the pressure calculations to each of the cells depending on their contents
    /// @param real _dt : The real time passed since the last step
    //----------------------------------------------------------------------------------------------------------------------
    void applyPressure(real _dt);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The advection portion of the semi-lagrangian algorithm
    /// @param real _dt : The real time passed since the last step
    //----------------------------------------------------------------------------------------------------------------------
    void advectVelocityField(real _dt);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Updates based on the body forces, such as gravity
    /// @param real _dt : The real time passed since the last step
    //----------------------------------------------------------------------------------------------------------------------
    void addBodyForce(real _dt);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The projection step, handles the pressure and incrompressibility portion of the fluid algoritm
    /// @param real _dt : The real time passed since the last step
    //----------------------------------------------------------------------------------------------------------------------
    void project(real _dt);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Updates each particle based on the new velocity field
    //----------------------------------------------------------------------------------------------------------------------
    void updateParticles();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A hacky function that ensures particles cannot leave the bounds of the simulation
    //----------------------------------------------------------------------------------------------------------------------
    void wrangleParticles();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Calculates the time step of the fluid equation (how many steps per frame)
    //----------------------------------------------------------------------------------------------------------------------
    real cfl();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Samples the velocity around the particle usng trilinear interpolation
    /// @param vec3 _p : The real position of the particle
    //----------------------------------------------------------------------------------------------------------------------
    vec3 getSampledVelocity(const vec3 &_p);

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The grid that we store the particles in, and calculate based on
    //----------------------------------------------------------------------------------------------------------------------
    MACGrid m_Grid;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The dimensions of the grid, cells in the x,y,z directions
    //----------------------------------------------------------------------------------------------------------------------
    uint m_gridLength;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The user defined scalar for the cfl function
    //----------------------------------------------------------------------------------------------------------------------
    real m_k_cfl = 1.0;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Density of the fluid, 1000 by default as in water
    //----------------------------------------------------------------------------------------------------------------------
    real m_density = 1000.0;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Density of the air surrounding the fluid
    //----------------------------------------------------------------------------------------------------------------------
    real m_airDensity = 1.3;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The gravity of the simulation
    //----------------------------------------------------------------------------------------------------------------------
    const vec3 m_g = vec3(0.0, -9.81, 0.0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The bounds of the simulation
    //----------------------------------------------------------------------------------------------------------------------
    real m_xMin, m_xMax, m_yMin, m_yMax, m_zMin, m_zMax;
};

#endif
